#!/bin/bash
#
# Script to build transpiler Docker image.
#
# Needs root privileges or 'docker' group membership

SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
. "${SCRIPT_DIR}/../inc.constants"
. "${SCRIPT_DIR}/../inc.functions"


# Default values
DEFAULT_ANDROID_API=28
DEFAULT_ANDROID_BUILD_TOOLS=28.0.3


# Functions
function usage {
    echo -e "Usage: ${0} [OPTIONS]"
    echo -e "Options:"
    echo -e "  --android-api API_LEVEL\t(default: ${DEFAULT_ANDROID_API})"
    echo -e "  --android-build-tools VERSION\t(default: ${DEFAULT_ANDROID_BUILD_TOOLS})"
    echo -e "  --docker-push\t\t\t(optional)"
    exit 1
}


# Command-line arguments
android_api=${DEFAULT_ANDROID_API}
android_build_tools=${DEFAULT_ANDROID_BUILD_TOOLS}
docker_push=
while [[ $# -gt 0 ]] ; do
    key="$1"
    case $key in
    --android-api)
        android_api="$2"
        shift # past argument
        ;;
    --android-build-tools)
        android_build_tools="$2"
        shift # past argument
        ;;
    --docker-push)
        docker_push=true
        ;;
    -h|--help)
        usage
        shift # past argument
        ;;
    *) # unknown option
        ;;
    esac
    shift # past argument or value
done


# Let's roll
image_tag=${android_api}_${android_build_tools}

safe docker build \
    --build-arg android_api=${android_api} \
    --build-arg android_build_tools=${android_build_tools} \
    --tag ${DOCKER_IMAGE}:${image_tag} .
if [ ${docker_push} ] ; then
    safe docker push ${DOCKER_IMAGE}:${image_tag}
fi

# Update 'latest' tag if script argument match defaults
if [ ${android_api} -eq ${DEFAULT_ANDROID_API} -a \
     ${android_build_tools} = ${DEFAULT_ANDROID_BUILD_TOOLS} ]; then
    safe docker tag ${DOCKER_IMAGE}:${image_tag} ${DOCKER_IMAGE}:latest
    if [ ${docker_push} ] ; then
        safe docker push ${DOCKER_IMAGE}:latest
    fi
fi
